<project name="mbuild-doComponent" default="doComponent" basedir=".">
	<description>
	====================================================================
		File: invoke component targets 
		
		This file contains all the component specific ant targets. 
		See the configuration.xml for the component sets which can be build. 
		This file is imported from the master mbuild.xml file. 
	===================================================================			
	</description> 

	<import file="build.xml"/>
	
	<!-- 
	 *	Target: check 
	 *	Sets:
	 *          scmpath               : path from root to component 
	 *			component.exists      : whether the component already exists in the local build environment 
	 *			component.update      : whether the component should be updated (scm update) 
	 *			component.checkout    : whether the component should be checked out from the scm 
	 *	Info:
	 *		The 'check' target sets some conditional properties which determine the scm state of the component
	 *			
	 --> 
    <target name="configure-component">
        
		<!-- scm environment --> 
		<property name="scmpath" value="${scm.path}/${name}" /> 
		<property name="scmname" value="${name}"/> 
		<property name="scmoptions" value="${scm.version}" />  
	    
		
		<!-- set default version, if not specified as parameter --> 
		<!-- set scm.version to ${version} if it is not set already --> 
	    
		<condition property="scm.version" value="${version}" > 
		    <not>
		 	    <isset property="scm.version"/> 
		    </not> 
    	</condition> 
			
			<!--
				Following (default) properties can be overriden if set BEFORE calling this target
	            (=default ant behaviour/feature !)
	            Also make sure following properties DO NOT COLLIDE WITH GLOBAL SET PROPERTIES,
	            once the property is set can not be reassigned.
	         --> 
		
		<condition property="component.checkout" value="true"> 
			<and>
				<isfalse value="${component.exists}"/> 
				<istrue value="${scm.checkout}"/> 
			</and>
		</condition> 
		
		<condition property="component.update" value="true"> 
            <and>
            	<!-- component must exist --> 
		        <istrue value="${component.exists}"/> 
				<istrue value="${scm.update}"/> 
			</and>
		</condition> 

	     <!-- 
	         Check Flattened Project (= Eclipse Environment!) 
	         A flattened project has all the components in ${project.sourceroot} 
	      -->
	    <condition property="sourcepath" value="${project.sourceroot}/${name}">
	        <istrue value="${project.flatten}"/> 
	    </condition> 
	    
	    <!--
	       Non flattened project: use project scm structure 
	       Source path is <sourceroot>/<scm.path>/<component name>
	    --> 
	    <condition property="sourcepath" value="${project.sourceroot}/${scm.path}/${name}">
	        <isfalse value="${project.flatten}"/> 
		</condition> 

		<available property="component.exists" file="${sourcepath}/build.xml"/> 

	    
		<!-- explicitly use string 'false' for token <false>
		     Todo: isn't there some other way to convert token false in string 'false' ?  -->
				
		<condition property="component.checkout.string" value="false"> 
			<isfalse value="${component.checkout}" /> 
		</condition> 
		
		<condition property="component.checkout.string" value="true"> 
			<istrue value="${component.checkout}" /> 
		</condition> 
		
		<condition property="component.exists.string" value="false"> 
			<isfalse value="${component.exists}" /> 
		</condition> 
			
		<condition property="component.exists.string" value="true"> 
			<istrue value="${component.exists}" /> 
		</condition> 
		
		<!-- TODO: Check version if component already exists... --> 
		
	</target>
	
	<!-- check uptodate-ness of component --> 
	
	<target name="isuptodate" depends="configure-component" if="component.exists" > 
		
		<!-- not 100%, Files in Attic result in warning => retval=1 
		<exec executable="scm" dir="${project.sourcedir}/${name}" resultproperty="component.scmdiff" >  
			<arg line ="-Q diff -r HEAD"/> 
		</exec> 
		
		<condition property="component.uptodate.string" value="no changes"> 
			<equals arg1="${component.scmdiff}" arg2="0" />
		</condition> 
		
		<condition property="component.uptodate.string" value="*** Warning: Component ${name} differes from repository ***"> 
			<equals arg1="${component.scmdiff}" arg2="1" />
		</condition> 
		
		<condition property="component.uptodate.string" value="*** Error: Component ${name} scm diff return error code ***"> 
			<equals arg1="${component.scmdiff}" arg2="2" />
		</condition> 
		
		< ! - -  does scm diff have more return values ? - - >  
		
		<condition property="component.uptodate.string" value="*** scm UNKNOWN RETURN VALUE ***"> 
		  <and>
		   <not>
			<equals arg1="${component.scmdiff}" arg2="0" />
		   </not>
		   <not>
			<equals arg1="${component.scmdiff}" arg2="1" />
		   </not> 
		  </and> 
		</condition> 
		
		<echo message="scm diff returned  = ${component.scmdiff}" /> 
		<echo message=" ${name}: uptodate = ${component.uptodate.string}" />
		<echo message=" ${name}: uptodate = ${component.uptodate.string}${line.separator}" file="${mbuild.log}" append="true" />
		--> 		
		
	</target> 
	
    <!-- Target: checkout: currently not used (anymore) --> 
   <target name="checkout-component" depends="configure-component" if="component.checkout">
		<!-- info --> 
		<echo message=" ${name}: scm checkout ${scmoptions} ${scmpath} "/>
		<echo message=" ${name}: scm root        = ${scm.user}@${scm.host}/${scm.root}"/>
		<echo message=" ${name}: scm destination = ${sourcepath}"/>
			
		<!-- Todo: find way to copy stdout to logfile --> 
		<echo file="${mbuild.log}" message=" ${name}: scm checkout ${scmoptions} ${scmpath}  =>  ${sourcepath} ${line.separator}" append="true" /> 

	    <echo message="scm co ${scmoptions} ${scmpath}"/>
	     <scm command="co ${scmoptions} ${scmpath}"
	        scmRoot=":ext:${scm.user}@${scm.host}/${scm.root}"
		    dest="${sourcepath}"
	        scmRsh="ssh"
	        />
	    
		<!-- important: rescan property since checkout results in existing component: --> 
		<available property="component.exists" file="${sourcepath}/build.xml"/> 
			
	</target>	
	
	<!-- update already existing component --> 
	<target name="update-component" depends="configure-component" if="component.update">
		<echo file="${mbuild.log}" message=" ${name}: scm update ${sourcepath} in ${line.separator}" append="true" /> 
		<scm command="update"	dest="${sourcepath}" />
	</target>	

	<!--
	 *	Target: doBuildComponent
	 *	Params : 
	 * 		target : target to do on the component
	 *		name   : component to build 
	 *
	 *	Info:
	 *		Uses the conditional targets: checkoutComponent and updateComponent to 
	 *    	check wether the compontent needs to be check'd out or updated from the scm. 
	 --> 
	<target name="doBuildComponent" depends="checkout-component,update-component"> 

		<fail unless="component.exists" 
		 message="*** Component: ${name} at ${sourcepath} is missing or scm checkout went wrong (missing build.xml file ?)" />
		
		<!-- default target: can be overriden by previous target--> 
		<property name="target" value="dist-install"/> 
		
		<ant antfile="build.xml" 
			dir="${sourcepath}" 
			target="${target}">
		 </ant>
		<mkdir dir="${project.conf}"/>
		<!-- mbuild log -->
		<echo file="${mbuild.log}" message="doComponent:${name} target=${target}: OK ${line.separator}" append="true" />
		
		<!-- update configuration -->
		<property name="comp.conf" location="${project.conf}/${name}" /> 
		<echo file="${comp.conf}" 
			  message= "#=== Component ${name} ===${line.separator}build=ok${line.separator}" append="true" /> 
		<echo file="${comp.conf}" 
			  message= "scmpath=${scmpath}${line.separator}" append="true" /> 
		<echo file="${comp.conf}" 
			  message= "target=${target}${line.separator}" append="true" /> 
			    
	</target> 
	
	<target name="buildComponent" depends="configure-component">
		<!-- print header --> 
		<echo message="============================================="/> 
		<echo message="=== Component: ${name}: ${target}"/> 
		<echo message="============================================="/> 
        <echo message=" project root         = ${project.root}"/> 
        <echo message=" project dist         = ${project.dist}"/> 
        <echo message=" project sourceroot   = ${project.sourceroot}"/> 
        <echo message=" project flatten      = ${project.flatten}"/> 
	    <echo message=" --- scm --- "/> 
 	    <echo message=" component scmpath    = ${scmpath}"/> 	
   		<echo message=" component sourcepath = ${sourcepath}"/> 
		<echo message=" component exists     = ${component.exists.string}"/> 
	
	    <echo file="${mbuild.log}" message="=== 
    		${line.separator}Build Component: ${name} 
	    	${line.separator}===
	    	${line.separator} Target   = ${target}
	    	${line.separator} scmpath  = ${scmpath}
	    	${line.separator} sourcepath = ${sourcepath}
	    	${line.separator} " append="true" /> 
		
		<antcall target="doBuildComponent" /> 
		
	</target> 
	
	<!--
	 *  Target: doComponent
	 *     command line command to manually build single component. 
	 *
	 *     for example: 
	 *         ant doComponent -Dname=auxTools -Dtarget=dist-install 
	 -->
	<target name="doComponent" depends="mbuild-init,buildComponent"> 
    </target> 
	
</project>