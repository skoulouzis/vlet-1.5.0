###############################################################################
# Project : VLET
# File    : VLET toplevel README 
# Author  : Piter T. de Boer 
#

This is the toplevel README for the VLET source distribution. 
If you can read this file it means you checked out the VLET source directly 
from the SCM repository. 
Some components might need extra configuration before a build can be done. 
Also experimental source may have been checked out which is currently not part 
of a stable distribution. This code will not be build. 

As a quick build instruction, execute the following commands: 

	./configure --prefix=/opt/vlet
	ant 
	ant bin-install 

This will configure and build a default distribution and 
install it in: "/opt/vlet"


Project Structure: 
===
 build.xml        ; Toplevel (bootstrap) ant file for the default build 
 project.prop     ; Default properties for the default build
 [build.prop]     ; (auto)configured build properties 
 README.txt       ; This readme 
 configure        ; autoconf (gnu-style) generated configure script 
 Makefile         ; Makefile wrapper for ant. The Makefile calls ant targets. 
 mbuild/          ; Project (meta) build component.
                    This component holds all the build logic and is 
                    called by the toplevel build file. 
 source/          ; Source components, see below:
 source/core/     ; Source components for the VRS. 
                    Note that the components in this 
                    directory are eclipse projects, each which an 
                    own source ("src") directory. 
 source/doc/      ; Documentation components (need latex command to create documents). 
                    LaTeX documents are treated as 'source' components.   
 source/modules/  ; Extra VLET modules. For example "module.jython"
 
 
Junit tests:
=== 
Current junit test source can be found under:
 
 source/core/nl.uva.vlet.vrs.tests 
   
These can only be run from an Eclipse environment. 


Building the project
===
 This is the toplevel build. 
 The ant file in this directory is just a bootstrap ant file for the 
 build in mbuild. See that directory for the actual  components and project
 structure. 
 All component configuration is in the  'mbuild/configuration.xml' file.    
 If you want to customize your build you can do that there. 
 
 To build everything, just type: 
 
     ant 

 which is equivalent to: 

     ant vlet-all

 if you wish to build vlet core, just the build command:
  
     ant vlet
     
 The above command will build a default distribution in 'dist'.  
 
 Build a source distribution (prepares components for a source distribution): 
  
     ant source-dist 
     
 Perform a binary installation after a (complete) build:  
 
     ant bin-install
      
 The above command uses the path as specified in the ./configure --prefix=<path>
 command where to install the distribution. 
 The default value is /opt/vlet. 
  
 
Configuring the project
=== 
 To configure the build settings, you can modify project.prop
 or create a build.prop file in which you specify your (local) 
 build settings. 
 This file can also be generated by using "configure". 
 The build.prop file will be read first before reading the default
 project settings file (BOTH project.prop AND mbuild/project.prop). 
   
 important project properties: 
 
   project.root   : root of project, can be mbuild' or this directory
   project.dist   : install directory of project, default is 'dist'
   
 All the project properties can be set using the -D argument when calling ant. 
 For example to install vlet in a different directory, invoke: 
 
    ant -Dproject.dist=/usr/local/vlet
 
 See project.prop for more project settings (or mbuild/project.prop). 
 The difference between the toplevel project.prop and the mbuild/project.prop 
 is that the first is intended for the default toplevel CVS build and the 
 second (in mbuild) for the default eclipse environment. 
 
 
The "configure; make; make install" commands for GNU people: 
=== 
 To comply with gnu-style configurations and 'builds', this
 toplevel directory also supports:
  
    ./configure [--prefix==<install directory> ] 
    make 
    make install
 		
 These are wrapper commands which call the actual ant files 
 with optional command line parsing.    
 
